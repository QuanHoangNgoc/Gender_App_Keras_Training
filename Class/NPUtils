import math
class NPUtils:
  # Singleton Pattern
  _instance = None
  def __new__(cls):
      if cls._instance is None:
          cls._instance = super(NPUtils, cls).__new__(cls)
      return cls._instance

  def isNP(self, val) -> bool:
    return isinstance(val, np.ndarray)
  def isTF(self, val) -> bool:
    return isinstance(val, tf.Tensor)

  def hashNP(self, val: np) -> tuple:
    round_number = 9
    return round(np.sqrt(np.sum(val**2)), round_number), round(np.sum(val), round_number)

  # to Matrix with len(shape) = 2 and type = numpy
  def convertToMatrix(self, _val) -> np:
    val = _val.copy()
    try:
      if(self.isNP(val) == False): val = val.numpy()
      if(len(val.shape) > 2):
        m = 1
        for l in val.shape: m *= l
        val = np.resize(val, (int(math.sqrt(m)), m // int(math.sqrt(m))))
      elif(len(val.shape) < 2):
        val = val.reshape(val.shape[0], 1)
      return val
    except Exception as ex: catchException(ex)

  def show(self, _val, scale = -1) -> None:
    val = _val.copy()
    verbose = True
    try:
      mesVerbose(verbose, view.over(val))
      val = self.convertToMatrix(val)

      if(scale != -1):
        plt.figure(figsize=(scale, scale*val.shape[1]/val.shape[0]))

      def_fontsize = plt.rcParams['font.size']
      plt.rcParams['font.size'] = 4
      plt.imshow(val, cmap = 'viridis')
      plt.show()
      plt.rcParams['font.size'] = def_fontsize
    except Exception as ex: catchException(ex)

npu = NPUtils()
